import operator
from typing import Any, Dict, List
from typing_extensions import Annotated, TypedDict


class State(TypedDict):
    question: str  # User question
    user_id: str  # User ID
    parsed_question: Dict[str, Any] # Parsed question, used in backend
    sql_query: str  # SQL query generated by the model
    sql_valid: bool  # Whether the SQL query is valid
    sql_issues: str  # Issues with the SQL query, if any
    results: List[Any]  # SQL query results, raw
    interpreted_answer: Annotated[str, operator.add]  # Interpreted text answer, can be used in frontend
    error: str # Error message, if any
    visualization: Annotated[str, operator.add]  # Visualization type [bar, line, etc.]
    visualization_reason: Annotated[str, operator.add]  # Reason for the visualization type chosen
    formatted_data_for_visualization: Dict[str, Any]  # Formatted data for visualization, sent to frontend

    
    # unique_nouns: List[str]